name: Deploy Azure Project Actions

on:
  workflow_dispatch:
  push:
    branches:
      - develop
      - staging
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    environment: ${{ github.ref_name == 'master' && 'production' || github.ref_name == 'staging' && 'staging' || 'develop' }}

    steps:
    - uses: actions/checkout@v3

    - name: Set environment variables
      run: |
        echo "IMAGE_TAG_WEB=${GITHUB_SHA::7}" >> $GITHUB_ENV
        echo "IMAGE_TAG_WORKER=${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: Set RAILS_ENV
      id: set-env
      run: |
        if [[ "${{ github.ref_name }}" == "master" ]]; then
          echo "RAILS_ENV=production" >> $GITHUB_ENV
        else
          echo "RAILS_ENV=development" >> $GITHUB_ENV
        fi

    - name: Build the Docker image
      run: |
        docker build -t ${{ secrets.REGISTRY_HOST }}/web:$IMAGE_TAG_WEB -t ${{ secrets.REGISTRY_HOST }}/web:latest -f docker/Dockerfile.web .
        docker build -t ${{ secrets.REGISTRY_HOST }}/worker:$IMAGE_TAG_WORKER -t ${{ secrets.REGISTRY_HOST }}/worker:latest -f docker/Dockerfile.worker .

    - name: Login acr
      uses: azure/docker-login@v2
      with:
        login-server: ${{ secrets.REGISTRY_HOST }}
        username: ${{ secrets.REGISTRY_USER }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Push the Docker image
      id: push-image
      run: |
        docker push ${{ secrets.REGISTRY_HOST }}/web:$IMAGE_TAG_WEB
        docker push ${{ secrets.REGISTRY_HOST }}/web:latest
        docker push ${{ secrets.REGISTRY_HOST }}/worker:$IMAGE_TAG_WORKER
        docker push ${{ secrets.REGISTRY_HOST }}/worker:latest

  deploy_web:
    needs: build
    runs-on: ubuntu-latest

    environment: ${{ github.ref_name == 'master' && 'production' || github.ref_name == 'staging' && 'staging' || 'develop' }}

    steps:
    - name: Set environment variables
      run: echo "IMAGE_TAG_WEB=${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Run WEB Container
      uses: azure/container-apps-deploy-action@v1
      with:
        containerAppName: ${{ secrets.CONTAINER_WEB_NAME }}
        resourceGroup: ${{ secrets.RESOURCE_GROUP }}
        imageToDeploy: ${{ secrets.REGISTRY_HOST }}/web:$IMAGE_TAG_WEB

  deploy_worker:
    needs: build
    runs-on: ubuntu-latest

    environment: ${{ github.ref_name == 'master' && 'production' || github.ref_name == 'staging' && 'staging' || 'develop' }}

    steps:
    - name: Set environment variables
      run: echo "IMAGE_TAG_WORKER=${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Run WORKER Container
      uses: azure/container-apps-deploy-action@v1
      with:
        containerAppName: ${{ secrets.CONTAINER_WORKER_NAME }}
        resourceGroup: ${{ secrets.RESOURCE_GROUP }}
        imageToDeploy: ${{ secrets.REGISTRY_HOST }}/worker:$IMAGE_TAG_WORKER

  verify_deployment:
    needs:
      - deploy_web
      - deploy_worker
    runs-on: ubuntu-latest

    environment: ${{ github.ref_name == 'master' && 'production' || github.ref_name == 'staging' && 'staging' || 'develop' }}

    steps:
    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set environment variables
      run: |
        echo "IMAGE_TAG_WEB=${GITHUB_SHA::7}" >> $GITHUB_ENV
        echo "IMAGE_TAG_WORKER=${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: Verify Deployment State Web
      run: |
        IMAGE_WEB="${{ secrets.REGISTRY_HOST }}/web:$IMAGE_TAG_WEB"
        echo "IMAGE_WEB: $IMAGE_WEB"
        APP_NAME="${{ secrets.CONTAINER_WEB_NAME }}"
        RESOURCE_GROUP="${{ secrets.RESOURCE_GROUP }}"
        SUCCESS=false
        TIMEOUT=$((3 * 60))
        INTERVAL=15

        echo "Checking revision state for $IMAGE_WEB in $APP_NAME..."

        SECONDS=0
        while [ $SECONDS -lt $TIMEOUT ]; do
          # Get the revision state
          REVISION_INFO=$(az containerapp revision list \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --query "[?contains(properties.template.containers[0].image, '$IMAGE_WEB')].{state: properties.runningState}" -o json)

          if [ -z "$REVISION_INFO" ]; then
            echo "No revision found for the image. Retrying..."
          else
            STATE=$(echo "$REVISION_INFO" | jq -r '.[0].state')
            echo "Current state: $STATE"

            # Check if the state contains 'Running'
            if [[ "$STATE" == *"Running"* ]]; then
              echo "Revision is in a running state: $STATE. Rechecking after 10 seconds..."
              sleep 10

              # Re-check state after waiting for 10 seconds
              REVISION_INFO_AFTER_WAIT=$(az containerapp revision list \
                --name $APP_NAME \
                --resource-group $RESOURCE_GROUP \
                --query "[?contains(properties.template.containers[0].image, '$IMAGE_WEB')].{state: properties.runningState}" -o json)

              STATE_AFTER_WAIT=$(echo "$REVISION_INFO_AFTER_WAIT" | jq -r '.[0].state')
              echo "State after 10 seconds: $STATE_AFTER_WAIT"

              if [[ "$STATE_AFTER_WAIT" == *"Running"* ]]; then
                echo "Revision remained in running state after 10 seconds."
                SUCCESS=true
                break
              else
                echo "Revision did not remain in running state. Retrying..."
              fi
            fi
          fi

          echo "Waiting for $INTERVAL seconds before retrying..."
          sleep $INTERVAL
        done

        if [ "$SUCCESS" = true ]; then
          echo "Deployment succeeded! Revision reached a stable running state."
          exit 0
        else
          echo "Deployment failed. Revision did not reach a stable running state within the timeout period."
          exit 1
        fi

    - name: Verify Deployment State Worker
      run: |
        IMAGE_WORKER="${{ secrets.REGISTRY_HOST }}/worker:$IMAGE_TAG_WORKER"
        echo "IMAGE_WORKER: $IMAGE_WORKER"
        APP_NAME="${{ secrets.CONTAINER_WORKER_NAME }}"
        RESOURCE_GROUP="${{ secrets.RESOURCE_GROUP }}"
        SUCCESS=false
        TIMEOUT=$((3 * 60))
        INTERVAL=15

        echo "Checking revision state for $IMAGE_WORKER in $APP_NAME..."

        SECONDS=0
        while [ $SECONDS -lt $TIMEOUT ]; do
          # Get the revision state
          REVISION_INFO=$(az containerapp revision list \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --query "[?contains(properties.template.containers[0].image, '$IMAGE_WORKER')].{state: properties.runningState}" -o json)

          if [ -z "$REVISION_INFO" ]; then
            echo "No revision found for the image. Retrying..."
          else
            STATE=$(echo "$REVISION_INFO" | jq -r '.[0].state')
            echo "Current state: $STATE"

            # Check if the state contains 'Running'
            if [[ "$STATE" == *"Running"* ]]; then
              echo "Revision is in a running state: $STATE. Rechecking after 10 seconds..."
              sleep 10

              # Re-check state after waiting for 10 seconds
              REVISION_INFO_AFTER_WAIT=$(az containerapp revision list \
                --name $APP_NAME \
                --resource-group $RESOURCE_GROUP \
                --query "[?contains(properties.template.containers[0].image, '$IMAGE_WORKER')].{state: properties.runningState}" -o json)

              STATE_AFTER_WAIT=$(echo "$REVISION_INFO_AFTER_WAIT" | jq -r '.[0].state')
              echo "State after 10 seconds: $STATE_AFTER_WAIT"

              if [[ "$STATE_AFTER_WAIT" == *"Running"* ]]; then
                echo "Revision remained in running state after 10 seconds."
                SUCCESS=true
                break
              else
                echo "Revision did not remain in running state. Retrying..."
              fi
            fi
          fi

          echo "Waiting for $INTERVAL seconds before retrying..."
          sleep $INTERVAL
        done

        if [ "$SUCCESS" = true ]; then
          echo "Deployment succeeded! Revision reached a stable running state."
          exit 0
        else
          echo "Deployment failed. Revision did not reach a stable running state within the timeout period."
          exit 1
        fi

  check-status-success:
    runs-on: ubuntu-latest
    needs:
      - build
      - deploy_web
      - verify_deployment
    if: success()
    environment: ${{ github.ref_name == 'master' && 'production' || github.ref_name == 'staging' && 'staging' || 'develop' }}
    env:
      SLACK_CHANNEL_ID: C086A791G48
    steps:
      - name: Set FULL_ENV
        id: set-env
        run: |
          if [[ "${{ github.ref_name }}" == "master" ]]; then
            echo "FULL_ENV=production" >> $GITHUB_ENV
            echo "::set-output name=full_env_output::production"
          else
            echo "FULL_ENV=development" >> $GITHUB_ENV
            echo "::set-output name=full_env_output::development"
          fi

      - name: Report Status
        uses: slackapi/slack-github-action@v1.22.0
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text": "<!channel>\nDeployment finished (Completed) :deploy:",
              "attachments": [
                {
                  "pretext": "ENV: ${{ steps.set-env.outputs.full_env_output }}\nRepository: ${{ github.repository }}\nGitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
                  "color": "28a745",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "Completed"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN}}

  check-status-failure:
    runs-on: ubuntu-latest
    needs:
      - build
      - deploy_web
      - verify_deployment
    if: failure()
    environment: ${{ github.ref_name == 'master' && 'production' || github.ref_name == 'staging' && 'staging' || 'develop' }}
    env:
      SLACK_CHANNEL_ID: C086A791G48
    steps:
      - name: Set FULL_ENV
        id: set-env
        run: |
          if [[ "${{ github.ref_name }}" == "master" ]]; then
            echo "FULL_ENV=production" >> $GITHUB_ENV
            echo "::set-output name=full_env_output::production"
          else
            echo "FULL_ENV=development" >> $GITHUB_ENV
            echo "::set-output name=full_env_output::development"
          fi

      - name: Report Status
        uses: slackapi/slack-github-action@v1.22.0
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text": "<!channel>\nDeployment Failure :error:",
              "attachments": [
                {
                  "pretext": "ENV: ${{ steps.set-env.outputs.full_env_output }}\nRepository: ${{ github.repository }}\nGitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
                  "color": "ff0000",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "Failed"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN}}
